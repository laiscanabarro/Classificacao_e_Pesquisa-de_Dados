# -*- coding: utf-8 -*-
"""Ordenacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M65qi4ipBqBrRUo5CKWhxNr5ZzpK-Pvl

# LAB 01 - CPD
Beatriz Forneck Soviero - 00342227 

Laís Fernanda Canabarro Araujo - 00342115

## Shell Sort
"""

msg = ''                                # variável global que  armazenará a string que representa a sequência atual
def shell(gap, inverso = True):

  global msg
  msg = 'SHELL'

  if inverso:                           # operação utilizada para alcançar o maior h possível
    gap *= 2

  else:
    gap //= 2                           # operação utilizada para decrementar o h
  return gap

def knuth(gap, inverso = True):

  global msg
  msg = 'KNUTH'

  if inverso:
    gap = 3 * gap + 1                   # operação utilizada para alcançar o maior h possível

  else:
    gap = (gap - 1) // 3                # operação utilizada para decrementar o h

  return gap

pos = 0                                 # variável global que representa o índice atual da sequência de Ciura
def ciura(gap, inverso = True):
  c = [0, 1,4,10,23,57,132,301,701,1577,3548,7983,17961,40412,90927,204585,460316,1035711]
  global pos

  global msg
  msg = 'CIURA'

  if inverso:                           # operação utilizada para alcançar o maior h possível
    pos += 1
    gap = c[pos]   

  else:
    pos -= 1
    gap = c[pos]

  return gap

def shellSort(lista, funcao):
  n = len(lista)
  h = 1

  while h < n:
    h = funcao(h)                     # h é inicializado com 1 e é realizada a operação dada como parâmetro até alncançar o maior valor possível

  if teste == 1:
    for i in lista:                    # escreve no arquivo a lista original e a sequência pedida
      saida.write(f'{i} ')    
    saida.write(f'SEQ={msg}\n')
  
  while h > 0:
    h = funcao(h, False)              # decrementa h
    for i in range(h, n):             # realiza insertion sort
      aux = lista[i]
      j = i
      while j >= h and lista[j - h] > aux:
        lista[j] = lista[j - h]
        j -= h
      lista[j] = aux
    if h > 0 and teste == 1:
      for l in lista:
        saida.write(f'{l} ')          # escreve no arquivo a lista após a ordenação parcial
      saida.write(f'INCR={h}\n')

"""## Acessando arquivos de entrada"""

array = []                                                      # array onde será armazenado cada vetor

teste = 1
arquivo = open('/entrada1.txt', 'r')                            # leitura do arquivo de entrada
linhas = arquivo.readlines() 

saida = open('/saida1.txt', 'w')                                # escrita do arquivo de saída

for linha in linhas:
  array = [int(numero) for numero in linha.split()]             # transforma cada linha em uma lista de inteiros
  del array[0]                                                  # retira primeiro termo da lista, que informa o tamanho dela

  auxArray = list(array)                                        # copia a lista para um aux já que ela é modificada nas funções
  shellSort(array, shell)

  array = list(auxArray)
  shellSort(array, knuth)

  array = list(auxArray)
  shellSort(array, ciura)

arquivo.close()   
saida.close()

"""## Teste de escala"""

import time

def cronometro(array, funcao):
  inicio = time.time()
  shellSort(array, funcao)
  fim = time.time()

  return (fim - inicio) * 1000                                                 # calcula o tempo de execução do shellSort

def testeEscala(array, tamanho):
  processador = "2.6 GHZ Intel Core i7"
  auxArray = list(array)                                        
  tempo_shell = cronometro(array, shell)                              # calcula o tempo da sequencia shell
  saida.write(f'SHELL, {tamanho}, {tempo_shell}, {processador}\n')    # escreve no arquivo o nome da sequência, seu tamanho, tempo para ordenação e o processador utilizado

  array = list(auxArray)
  tempo_knuth = cronometro(array, knuth)                              # calcula o tempo da sequencia knuth
  saida.write(f'KNUTH, {tamanho}, {tempo_knuth}, {processador}\n')

  array = list(auxArray)
  tempo_ciura = cronometro(array, ciura)                              # calcula o tempo da sequencia ciura
  saida.write(f'CIURA, {tamanho}, {tempo_ciura}, {processador}\n')

array = []

teste = 2
arquivo = open('/entrada2.txt', 'r')                                  # leitura do arquivo de entrada
linhas = arquivo.readlines() 

saida = open('/saida2.txt', 'w')                                      # escrita do arquivo de saída

for linha in linhas:
   array = [int(numero) for numero in linha.split()]                  # transforma cada linha em uma lista de inteiros
   tamanho = array[0]                                                 # pega o tamanho da lista que está na primeira posição do dela
   del array[0]                                                       # retira o elemento que informa o tamanho da lista
   testeEscala(array, tamanho)


arquivo.close()   
saida.close()